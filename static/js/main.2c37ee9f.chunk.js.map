{"version":3,"sources":["components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Navbar","react_default","a","createElement","className","NavLink","to","Home","posts","this","props","postList","length","map","post","key","id","Link","concat","title","body","Component","connect","state","Rainbow","WrappedComponent","randomColour","Math","floor","random","Contact","Post","handleClick","_this","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","BrowserRouter","components_Navbar","Switch","Route","exact","path","component","About","Boolean","window","location","hostname","initState","rootReducer","arguments","undefined","action","newPosts","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c37ee9f.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper red darken-3\">\r\n                <div className=\"container\">\r\n                    <a className=\"brand-logo\">Poke Times</a>\r\n                    <ul className=\"right\">\r\n                        <li><NavLink to=\"/\">Home</NavLink></li>\r\n                        <li><NavLink to=\"/about\">About</NavLink></li>\r\n                        <li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        const { posts } = this.props;\r\n        const postList = posts.length ? (\r\n            posts.map(post => {\r\n                return (\r\n                    <div className=\"post card\" key={post.id}>\r\n                        <div className=\"card-content\">\r\n                            <Link to={`/${post.id}`}>\r\n                                <span className=\"card-title\">\r\n                                    {post.title}\r\n                                </span>\r\n                            </Link>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ): (\r\n            <div className=\"center\">\r\n                No Posts Yet\r\n            </div>\r\n        );\r\n        return (\r\n            <div className=\"container\">\r\n                <h4 className=\"center\">Home</h4>\r\n                {postList}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        posts: state.posts\r\n    }\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps)(Home);","import React from 'react'\r\nimport Rainbow from '../hoc/Rainbow';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">About</h4>\r\n            <p>\r\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolore ducimus fuga, illum nisi nobis\r\n                perspiciatis suscipit tempora tenetur totam veniam veritatis voluptas, voluptates voluptatum. A atque\r\n                aut deleniti ea sed.\r\n            </p>\r\n        </div>\r\n    )\r\n};\r\nexport default Rainbow(About);","import React from 'react';\r\n\r\nconst Rainbow = (WrappedComponent) => {\r\n\r\n    const colours =  ['red', 'pink', 'orange' ,'blue', 'green', 'yellow'] ;\r\n    const randomColour = colours[Math.floor(Math.random() * 5 )];\r\n    const className = `${randomColour}-text`;\r\n    return (props) => {\r\n        return (\r\n            <div className={className}>\r\n                <WrappedComponent {...props} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nexport default Rainbow;","import React from 'react'\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Contact</h4>\r\n            <p>\r\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolore ducimus fuga, illum nisi nobis\r\n                perspiciatis suscipit tempora tenetur totam veniam veritatis voluptas, voluptates voluptatum. A atque\r\n                aut deleniti ea sed.\r\n            </p>\r\n        </div>\r\n    )\r\n};\r\nexport default Contact;","import React, { Component } from  'react';\r\nimport {connect} from \"react-redux\";\r\nimport {deletePost} from \"../actions/postActions\";\r\n\r\nclass Post extends Component {\r\n\r\n    handleClick = () => {\r\n        this.props.deletePost(this.props.post.id);\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    render() {\r\n        const post = this.props.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">\r\n                    {this.props.post.title}\r\n                </h4>\r\n                <p>{this.props.post.body}</p>\r\n                <div className=\"center\">\r\n                    <button className=\"btn grey\" onClick={this.handleClick}>\r\n                        Delete Post\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        ) : (\r\n            <div className=\"center\">\r\n                Loading post ...\r\n            </div>\r\n        ) ;\r\n        return (\r\n            <div className=\"container\">\r\n                {post}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps) => {\r\n\r\n    let id = ownProps.match.params.post_id;\r\n    return {\r\n        post: state.posts.find(post => post.id === id)\r\n    }\r\n\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        deletePost: (id) => { dispatch(deletePost(id)) }\r\n    }\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Post);","export  const deletePost = (id) => {\r\n\r\n    return {\r\n        type: 'DELETE_POST',\r\n        id\r\n    }\r\n\r\n};","import React, { Component } from 'react';\r\nimport Navbar from \"./components/Navbar\";\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport Home from \"./components/Home\";\r\nimport About from \"./components/About\";\r\nimport Contact from \"./components/Contact\";\r\nimport Post from \"./components/Post\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n      return (\r\n          <BrowserRouter>\r\n              <div className=\"App\">\r\n                  <Navbar />\r\n                  <Switch>\r\n                      <Route exact path='/' component={Home} />\r\n                      <Route path='/about' component={About} />\r\n                      <Route path='/contact' component={Contact} />\r\n                      <Route path=\"/:post_id\" component={Post} />\r\n                  </Switch>\r\n              </div>\r\n          </BrowserRouter>\r\n      );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const  initState = {\r\n    posts: [\r\n        { id: '1', title: 'Title', body: 'Body goes here' },\r\n        { id: '2', title: 'Title', body: 'Body goes herdqwhjdqwhjde' },\r\n        { id: '3', title: 'Third Title', body: 'Third Body goes herdqwhjdqwhjde' }\r\n    ]\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if(action.type === 'DELETE_POST'){\r\n        let newPosts = state.posts.filter(post => {\r\n            return post.id !== action.id;\r\n        });\r\n        return {\r\n            ...state,\r\n            posts: newPosts\r\n        }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from  'redux';\r\nimport { Provider } from  'react-redux';\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}